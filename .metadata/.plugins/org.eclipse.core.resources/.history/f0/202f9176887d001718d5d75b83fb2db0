sap.ui.controller("two_odatas-in1view.view1", {

/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* @memberOf two_odatas-in1view.view1
*/
	onInit: function() {
    var Omodel1=new sap.ui.model.json.JSONModel();
    Omodel1.loadData("model/model1.json");
    this.getView().setModel(Omodel1)
    
    var Omodel2=new sap.ui.model.json.JSONModel();
    Omodel2.loadData("model/model2.json");
    this.getView().setModel(Omodel2,"M2")
    
    var Omodel3=new sap.ui.model.json.JSONModel();
    Omodel3.loadData("model/model3.json");
    this.getView().setModel(Omodel3,"M3")
   //binding second json
    var smplfrm=this.getView().byId("idsmplfrm")
     
    smplfrm.bindElement("/data1/2/")
    
    
    
    smplfrm.bindElement("M2>/data2/0/")
  

}

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* @memberOf two_odatas-in1view.view1
*/
//	onBeforeRendering: function() {
//
//	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @memberOf two_odatas-in1view.view1
*/
//	onAfterRendering: function() {
//
//	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @memberOf two_odatas-in1view.view1
*/
//	onExit: function() {
//
//	}

});